===========================
How to use 3-say_my_name.py
===========================

This module defines a function that prints my name is <first name> <last name>

=====
Usage
=====
"say_my_name(first_name, last_name)" returns a my name is <first name> <last name>

passing the function a first name and last name.

::

    >>> say_my_name = __import__("3-say_my_name").say_my_name
    >>> say_my_name("Mohammad", "Adde")
    My name is Mohammad Adde

The last name is optional.

::

    >>> say_my_name("Mohammad")
    My name is Mohammad

Both cannot be numbers or even anything other than string.

::

    >>> say_my_name(2, "Adde")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name("Mohammad", 2)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name(None)
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name("Mohammad", None)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name("Mohammad", ["Mohammad", "Adde"])
	Traceback (most recent call last):
		...
	TypeError: last_name must be a string

    >>> say_my_name({"Mohammad": 10, "Adde": 20}, 25)
	Traceback (most recent call last):
		...
	TypeError: first_name must be a string
 
At least there should be one paramter.

::

    >>> say_my_name()
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

